type Values = {
    | IntValue Int
    | FloatValue Float
}

type Maybe<a> = {
    | Just a
    | Nothing
}

type Map<k,v> = {
    | Node (k, v, Map, Map)
    | Nil
}

var main = sys => {
    1
}

var bind = map => {
    key => {
        value => {
            match map {
                | Nil -> Node (key, value, Nil, Nil)
                | Node (key', value', map1', map2') -> 
                case {
                    | key == key' -> Node (key, value, map1', map2')
                    | key < key'  -> Node (key', value', (bind map1' key value), map2')
                    | key > key'  -> Node (key', value', map1', (bind map2' key value))
                }
            }
        } 
    }
}

#var lookup::(Map<k<<Eq,Ord>>,v> -> (k<<Eq,Ord>> -> Maybe<v>)) = map => {
#    key => {
#        match map {
#            | Nil -> Nothing
#            | Node (key', value', map1', map2') ->
#            case {
#                | key == key' -> Just value'
#                | key < key'  -> lookup map1' key
#                | key > key'  -> lookup map2' key
#            }
#        }
#    }
#}

var writes::(String -> (File* -> (Bool, File*))) = s => {
    f => {
        match s {
            | []     -> (true, f)
            | (c:cs) -> 
                let (succ, f') = write c f 
                in (case {
                    | succ == true -> (writes cs f')
                    | ?            -> (false, f') 
                })
        }
    }
}

var readLn::(File* -> (Bool, String, File*)) = f => {
    let (succ, c, f') = read f
    in (case {
        | succ == true -> 
        match c {
            | '\n' -> (true, ['\n'], f')
            | ?    -> let (succ2, s, f2') = readLn f'
                        in (case {
                             | succ2 == true -> (true, (c:s), f2')
                             | ?             -> (false, (c:s), f2')
                            })
                }
        | ?            -> (false, [c], f')
    })
}

var prompt::(String -> (File* -> (File* -> (Bool, String, File*, File*)))) = s => {
    outf => {
        inf => {
            let (succ, outf') = writes s outf
            in (match succ {
                | true -> 
                    let (succ', line, inf') = readLn inf
                    in (match succ' {
                        | true -> (true, line, outf', inf')
                        | ?    -> (false, "", outf', inf')
                    })
                | ?    -> (false, "", outf', inf)
            })
        }
    }
}