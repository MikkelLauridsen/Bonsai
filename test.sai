
type Test1 = {
    | One
    | Two
}

type Test2 = {
    | Three 
    | Four
}

type Values = {
    | IntValue Int
    | FloatValue Float
}

type MaybeValue = {
    | Just Values
    | Nothing
}

type Env = {
    | Node (String, Values, Env, Env)
    | Vacant
}

var bind::(Env -> (String -> (Values -> Env))) = env => {
    key => {
        value => {
            match env {
                | Vacant                          -> Node (key, value, Vacant, Vacant)
                | Node (key', value', env1, env2) -> 
                case {
                    | key == key' -> Node (key, value, env1, env2)
                    | key < key'  -> Node (key', value', (bind env1 key value), env2)
                    | key > key'  -> Node (key', value', env1, (bind env2 key value))
                }
            }
        } 
    }
}

var lookup::(Env -> (String -> MaybeValue)) = env => {
    key => {
        match env {
            | Vacant -> Nothing
            | Node (key', value', env1, env2) ->
            case {
                | key == key' -> Just value'
                | key < key'  -> lookup env1 key
                | key > key'  -> lookup env2 key
            }
        }
    }
}

var writes::(String -> (File* -> (Bool, File*))) = s => {
    f => {
        match s {
            | []     -> (true, f)
            | (c:cs) -> 
                let (succ, f') = write c f 
                in (case {
                    | succ == true -> (writes cs f')
                    | ?            -> (false, f') 
                })
        }
    }
}

var readLn::(File* -> (Bool, String, File*)) = f => {
    let (succ, c, f') = read f
    in (case {
        | succ == true -> 
        match c {
            | '\n' -> (true, ['\n'], f')
            | ?    -> let (succ2, s, f2') = readLn f'
                        in (case {
                             | succ2 == true -> (true, (c:s), f2')
                             | ?             -> (false, (c:s), f2')
                            })
                }
        | ?            -> (false, [c], f')
    })
}

#var reverse::(String -> String) = s => {
#    match s {
#        | []     -> []
#        | (c:cs) -> reverse cs ++ [c]
#    }
#} 

var prompt = s => {
    outf => {
        inf => {
            let (succ, outf') = writes s outf
            in (match succ {
                | true -> 
                    let (succ', line, inf') = readLn inf
                    in (match succ' {
                        | true -> (true, line, outf', inf')
                        | ?    -> (false, "", outf', inf')
                    })
                | ?    -> (false, "", outf', inf)
            })
        }
    }
}

var main = sys => {
    let env = (bind (bind Vacant "x" (IntValue 32)) "xyyy" (FloatValue 54))
    in (
        let (?, stdout') = writes ((show env) ++ "\n") stdout
        in (
            writes (show (lookup env "xyyy")) stdout'
        )
    )
}

#var main = sys => {
#    let (succ, line, stdout', stdin') = prompt "input int-value: " stdout stdin
#    in (match succ {
#        | true -> 
#        match (to_int line) {
#            | (false, ?) -> writes "invalid string format.\n" stdout'
#            | (?, val)   -> writes ("times 2: " ++ (show (2 * val))) stdout' 
#        }
#        | ?    -> writes "could not access file.\n" stdout'
#    })
#}

#var main::(System* -> (Bool, File*)) = sys => {
#    let (succ, line, stdin') = readLn stdin 
#    in (match succ {
#        | true  -> writes (reverse line) stdout
#        | false -> writes "unable to access stdin.\n" stdout
#    })
#}