
type Maybe = {
    | None
    | Some Int
}

type Either = {
    | Right A
    | Left B
}

var test_minus = -323.23 * 32.23 + -3211.1 - -3.2

var test_tuple = (34, 25)

var expr = 43.3 * 32.2 /3.2 + (43.22 - 2.2 * 43.2)

var test = "interesting.\nwassupl"
var testttt = "xD Dx"
var test_2 = '\n'

var boolVal_c = (x && y) || ((32 <= 42) && x) || ((val1 == val2) && y)

var test = "noob"

var max = list::[Int] => {
    match list {
    | []     -> None
    | (x:xs) ->
    let current = max xs in 
        (match current {
        | None -> x
        | Some ->
            case {
            | x > current  -> x
            | x <= current -> current
            }
        | ? -> [1, 2]
        })
    }
}

var quick_maff = 4+6*3

var x = "aaaa\""

var xx_x = 32.3 * 3.2

var virk_tak = 230

var xx_y = "heej noobs l hehe xD"

var eval::(ExpressionAST -> Float) = expr => {
    match expr {
        | PlusAST   (left, right) -> eval left + eval right
        | MinusAST  (left, right) -> eval left - eval right
        | TimesAST  (left, right) -> eval left * eval right
        | DivideAST (left, right) -> eval left / eval right
        | UMinusAST operand       -> ~eval operand
        | ValueAST  value         -> value
    }
}