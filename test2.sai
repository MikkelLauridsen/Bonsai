type Maybe<a> = {
    | Just a
    | Nothing
}

type Map<k,v> = {
    | Node (k, v, Map, Map)
    | Nil
}

var hmm2 = u => { u * 5 }

var main = sys => {
    1
} 

var uuup = lookup (Node ('c', 4.0, Nil, Nil))

var uuuup = fun ('c', 5.0)

var ii::Int = 10

var fun = u => {
    match u {
        | ('c', 4.0) -> 4.0
        | (x, y) -> y * 3.0
    }
}

var lookup = map => { # TODO: undgå constraints på termkonstruktørers "globale" variabler
    key => {
        match map {
            | Nil -> Nothing
            | Node (key', value', map1', map2') ->
            case {
                | key == key' -> Just value'
                | key < key'  -> lookup map1' key
                | key > key'  -> lookup map2' key
            }
        }
    }
}