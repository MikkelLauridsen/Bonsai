-- Unit tests for the infer function from the inference file.

-- imports the AST and Inference files
-- imports HUnit
import Ast
import Inference
import Test.HUnit


utilDataHolder = UtilData (1, 1, 1) "source"
file = "FilePath"

-- A testcase where main is not out of scope
-- and hence it will return an error message
testEpsAST = TestCase $ assertEqual   
    "Should give error message because main needs to have a type"
    (infer "FilePath" (ProgAST EpsTypeDclAST EpsVarDclAST utilDataHolder))
    (Just ("FilePath:1:1: error: variable 'main' is out of scope in:\n   source\n   ^^^^^^"))

-- Checks if types are both either integer or floats
-- In this case one of them is integer and the other is float
-- hence it will return an error message
testFloatInt = TestCase $ assertBool
    "test"
    ((infer file floatIntProgAst)
    /= Nothing)

-- In this case both are integers
-- Doesn't return error message
testIntInt = TestCase $ assertBool
    "test"
    ((infer file intIntProgAST)
    == Nothing)

-- Testcase for a tuple
-- Doesn't return error message
testTuple = TestCase $ assertBool
    "test"
    ((infer file tupleProgAST)
    == Nothing)

-- Testcase for lists
-- Checks if the list only consists of elements of the same type
-- In this case the elements are not of the same type
-- returns error message
testListFail = TestCase $ assertBool
    "test"
    ((infer file listProgASTFail)
    /= Nothing)

-- List only consists of elements of the same type
-- Doesn't return error message
testList = TestCase $ assertBool
    "test"
    ((infer file listProgAST)
    == Nothing)

-- Checks if both types are strings
-- Doesn't return error message
testInferStringCompareTrue = TestCase $ assertBool
                "Should return Nothing"
                ((infer "filePath" stringCompareProg) == Nothing)

-- returns error message
testinferStringCompareFalse = TestCase $ assertBool
                "Should return Just"
                ((infer "filePath" stringCompareProgFail) /= Nothing)

-- Checks if both types are chars
-- Doesn't return error message
testinferCharCompareTrue = TestCase $ assertBool
                "Should return Nothing"
                ((infer "filePath" charCompareProg) == Nothing)

-- Checks if the case is valid
-- Doesn't return error message
testinferCaseTrue = TestCase $ assertBool
                "Should return Nothing"
                ((infer "filepath" caseTestProg) == Nothing)

-- Checks if the lambda function is valid
-- Doesn't return error message
testinferLambdaTrue = TestCase $ assertBool
                "Should return Nothing"
                ((infer "filePath" lambdaTestProg) == Nothing)

-- Checks if the match function is valid
-- Doesn't return error message
testInferMatch = TestCase $ assertBool
                "Should return nothing"
                ((infer file matchTestProg) == Nothing)

-- Checks if the Let in function is valid
-- Doesn't return error message
testInferLetIn = TestCase $ assertBool
                "Should return nothing"
                ((infer file letTestProg) == Nothing)

-- main which runs all the above-mentioned functions
main = runTestTT $ TestList [testFloatInt
                            , testIntInt
                            , testTuple
                            , testListFail
                            , testList
                            , testInferStringCompareTrue
                            , testinferStringCompareFalse
                            , testinferCharCompareTrue
                            , testinferCaseTrue
                            , testinferLambdaTrue
                            , testInferMatch
                            , testInferLetIn
                            ]


-- Prog ASTs placeholders
floatIntProgAst = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (FunAppExprAST (FunAppExprAST (ConstExprAST (PlusConstAST (UtilData {position = (1,25,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (UtilData {position = (1,25,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (ConstExprAST (IntConstAST 10 (UtilData {position = (1,23,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (UtilData {position = (1,23,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (UtilData {position = (1,25,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (ConstExprAST (FloatConstAST 50.5 (UtilData {position = (1,30,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (UtilData {position = (1,30,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (UtilData {position = (1,25,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => { 10 + 50.5 }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => { 10 + 50.5 }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => { 10 + 50.5 }"})
intIntProgAST = (ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => { 10 + 10 }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => { 10 + 10 }"})) (FunAppExprAST (FunAppExprAST (ConstExprAST (PlusConstAST (UtilData {position = (1,25,4), sourceLine = " main = sys => { 10 + 10 }"})) (UtilData {position = (1,25,4), sourceLine = " main = sys => { 10 + 10 }"})) (ConstExprAST (IntConstAST 10 (UtilData {position = (1,23,4), sourceLine = " main = sys => { 10 + 10 }"})) (UtilData {position = (1,23,4), sourceLine = " main = sys => { 10 + 10 }"})) (UtilData {position = (1,25,4), sourceLine = " main = sys => { 10 + 10 }"})) (ConstExprAST (IntConstAST 10 (UtilData {position = (1,28,4), sourceLine = " main = sys => { 10 + 10 }"})) (UtilData {position = (1,28,4), sourceLine = " main = sys => { 10 + 10 }"})) (UtilData {position = (1,25,4), sourceLine = " main = sys => { 10 + 10 }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => { 10 + 10 }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => { 10 + 10 }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => { 10 + 10 }"}))
tupleProgAST = (ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})) (TupleExprAST [ConstExprAST (IntConstAST 8 (UtilData {position = (1,23,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})) (UtilData {position = (1,23,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"}),ConstExprAST (FloatConstAST 8.0 (UtilData {position = (1,28,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})) (UtilData {position = (1,28,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"}),ConstExprAST (FloatConstAST 9.1 (UtilData {position = (1,33,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})) (UtilData {position = (1,33,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})] (UtilData {position = (1,22,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => { (8, 8.0, 9.1) }"}))
listProgAST = (ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => { [1, 2, 3] }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => { [1, 2, 3] }"})) (ListExprAST [ConstExprAST (IntConstAST 1 (UtilData {position = (1,23,4), sourceLine = " main = sys => { [1, 2, 3] }"})) (UtilData {position = (1,23,4), sourceLine = " main = sys => { [1, 2, 3] }"}),ConstExprAST (IntConstAST 2 (UtilData {position = (1,26,4), sourceLine = " main = sys => { [1, 2, 3] }"})) (UtilData {position = (1,26,4), sourceLine = " main = sys => { [1, 2, 3] }"}),ConstExprAST (IntConstAST 3 (UtilData {position = (1,29,4), sourceLine = " main = sys => { [1, 2, 3] }"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => { [1, 2, 3] }"})] (UtilData {position = (1,22,4), sourceLine = " main = sys => { [1, 2, 3] }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => { [1, 2, 3] }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => { [1, 2, 3] }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => { [1, 2, 3] }"}))
listProgASTFail = (ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})) (ListExprAST [ConstExprAST (IntConstAST 1 (UtilData {position = (1,23,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})) (UtilData {position = (1,23,4), sourceLine = " main = sys => { [1, 2, 3.0] }"}),ConstExprAST (IntConstAST 2 (UtilData {position = (1,26,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})) (UtilData {position = (1,26,4), sourceLine = " main = sys => { [1, 2, 3.0] }"}),ConstExprAST (FloatConstAST 3.0 (UtilData {position = (1,31,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})) (UtilData {position = (1,31,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})] (UtilData {position = (1,22,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => { [1, 2, 3.0] }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => { [1, 2, 3.0] }"}))
stringCompareProg = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (FunAppExprAST (FunAppExprAST (ConstExprAST (EqualsConstAST (UtilData {position = (1,30,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,30,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (ListExprAST [ConstExprAST (CharConstAST 116 (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"}),ConstExprAST (CharConstAST 101 (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"}),ConstExprAST (CharConstAST 115 (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"}),ConstExprAST (CharConstAST 116 (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})] (UtilData {position = (1,27,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,30,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (ListExprAST [ConstExprAST (CharConstAST 116 (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"}),ConstExprAST (CharConstAST 101 (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"}),ConstExprAST (CharConstAST 115 (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"}),ConstExprAST (CharConstAST 116 (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})] (UtilData {position = (1,37,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,30,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => { \"test\" == \"test\" }"})
stringCompareProgFail = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (FunAppExprAST (FunAppExprAST (ConstExprAST (EqualsConstAST (UtilData {position = (1,32,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,32,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (ListExprAST [ConstExprAST (CharConstAST 83 (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"}),ConstExprAST (CharConstAST 116 (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"}),ConstExprAST (CharConstAST 114 (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"}),ConstExprAST (CharConstAST 105 (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"}),ConstExprAST (CharConstAST 110 (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"}),ConstExprAST (CharConstAST 103 (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"})] (UtilData {position = (1,29,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,32,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (ConstExprAST (CharConstAST 67 (UtilData {position = (1,36,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,32,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => { \"String\" == 'C' }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => { \"String\" == 'C' }"})
charCompareProg = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (FunAppExprAST (FunAppExprAST (ConstExprAST (EqualsConstAST (UtilData {position = (1,27,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (UtilData {position = (1,27,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (ConstExprAST (CharConstAST 67 (UtilData {position = (1,24,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (UtilData {position = (1,24,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (UtilData {position = (1,27,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (ConstExprAST (CharConstAST 67 (UtilData {position = (1,31,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (UtilData {position = (1,31,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (UtilData {position = (1,27,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => { 'C' == 'C' }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => { 'C' == 'C' }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => { 'C' == 'C' }"})
caseTestProg = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (CaseExprAST [(PredExprAST (FunAppExprAST (FunAppExprAST (ConstExprAST (GreaterConstAST (UtilData {position = (1,31,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,31,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (ConstExprAST (IntConstAST 5 (UtilData {position = (1,29,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,31,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (ConstExprAST (IntConstAST 4 (UtilData {position = (1,33,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,33,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,31,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,31,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"}),ConstExprAST (IntConstAST 5 (UtilData {position = (1,38,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})),(PredExprAST (FunAppExprAST (FunAppExprAST (ConstExprAST (LessConstAST (UtilData {position = (1,43,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,43,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (ConstExprAST (IntConstAST 5 (UtilData {position = (1,41,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,41,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,43,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (ConstExprAST (IntConstAST 4 (UtilData {position = (1,45,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,45,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,43,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,43,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"}),ConstExprAST (IntConstAST 4 (UtilData {position = (1,50,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,50,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"}))] (UtilData {position = (1,24,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => {case {| 5 > 4 -> 5| 5 < 4 -> 4}}"})
caseTestProgFail = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (CaseExprAST [(PredExprAST (FunAppExprAST (FunAppExprAST (ConstExprAST (GreaterConstAST (UtilData {position = (1,38,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (ListExprAST [ConstExprAST (CharConstAST 83 (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 116 (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 114 (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 105 (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 110 (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 103 (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})] (UtilData {position = (1,36,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (ConstExprAST (IntConstAST 5 (UtilData {position = (1,40,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,40,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ListExprAST [ConstExprAST (CharConstAST 83 (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 116 (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 114 (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 105 (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 110 (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 103 (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})] (UtilData {position = (1,52,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})),(PredExprAST (FunAppExprAST (FunAppExprAST (ConstExprAST (LessConstAST (UtilData {position = (1,64,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,64,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (ListExprAST [ConstExprAST (CharConstAST 83 (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 116 (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 114 (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 105 (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 110 (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (CharConstAST 103 (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})] (UtilData {position = (1,62,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,64,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (ConstExprAST (IntConstAST 5 (UtilData {position = (1,66,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,66,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,64,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,64,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}),ConstExprAST (IntConstAST 5 (UtilData {position = (1,71,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,71,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"}))] (UtilData {position = (1,24,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => {case {| \"String\" > 5 -> \"String\"| \"String\" < 5 -> 5}}"})
lambdaTestProg = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => {x => {x * 10}}"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => {x => {x * 10}}"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "x"}) (UtilData {position = (1,21,4), sourceLine = " main = sys => {x => {x * 10}}"})) (FunAppExprAST (FunAppExprAST (ConstExprAST (TimesConstAST (UtilData {position = (1,29,4), sourceLine = " main = sys => {x => {x * 10}}"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => {x => {x * 10}}"})) (VarExprAST (VarId {varName = "x"}) (UtilData {position = (1,27,4), sourceLine = " main = sys => {x => {x * 10}}"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => {x => {x * 10}}"})) (ConstExprAST (IntConstAST 10 (UtilData {position = (1,32,4), sourceLine = " main = sys => {x => {x * 10}}"})) (UtilData {position = (1,32,4), sourceLine = " main = sys => {x => {x * 10}}"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => {x => {x * 10}}"})) (UtilData {position = (1,24,4), sourceLine = " main = sys => {x => {x * 10}}"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => {x => {x * 10}}"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => {x => {x * 10}}"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => {x => {x * 10}}"})
lambdaTestPropFail = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "x"}) (UtilData {position = (1,21,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (FunAppExprAST (FunAppExprAST (ConstExprAST (TimesConstAST (UtilData {position = (1,29,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (VarExprAST (VarId {varName = "x"}) (UtilData {position = (1,27,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (ListExprAST [ConstExprAST (CharConstAST 115 (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"}),ConstExprAST (CharConstAST 116 (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"}),ConstExprAST (CharConstAST 114 (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"}),ConstExprAST (CharConstAST 105 (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"}),ConstExprAST (CharConstAST 110 (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"}),ConstExprAST (CharConstAST 103 (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})] (UtilData {position = (1,38,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,24,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => {x => {x * \"string\"}}"})
matchTestProg = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (MatchExprAST (ConstExprAST (BoolConstAST True (UtilData {position = (1,36,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) [(ConstPatternAST (BoolConstAST False (UtilData {position = (1,57,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (UtilData {position = (1,57,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"}),ConstExprAST (IntConstAST 0 (UtilData {position = (1,62,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (UtilData {position = (1,62,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})),(ConstPatternAST (BoolConstAST True (UtilData {position = (1,80,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (UtilData {position = (1,80,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"}),ConstExprAST (IntConstAST 1 (UtilData {position = (1,85,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (UtilData {position = (1,85,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"}))] (UtilData {position = (1,31,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => {      match true {            | false -> 0            | true -> 1      } }"})
letTestProg = ProgAST EpsTypeDclAST (VarDclAST (UntypedVarAST (VarId {varName = "main"}) (UtilData {position = (1,9,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (LambdaExprAST (UntypedVarAST (VarId {varName = "sys"}) (UtilData {position = (1,15,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (LetInExprAST (UntypedVarAST (VarId {varName = "x"}) (UtilData {position = (1,31,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (ListExprAST [ConstExprAST (IntConstAST 1 (UtilData {position = (1,36,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,36,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"}),ConstExprAST (IntConstAST 2 (UtilData {position = (1,38,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,38,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"}),ConstExprAST (IntConstAST 3 (UtilData {position = (1,40,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,40,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"}),ConstExprAST (IntConstAST 4 (UtilData {position = (1,42,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,42,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"}),ConstExprAST (IntConstAST 5 (UtilData {position = (1,44,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,44,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})] (UtilData {position = (1,35,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (FunAppExprAST (FunAppExprAST (ConstExprAST (AppenConstAST (UtilData {position = (1,59,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,59,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (ConstExprAST (IntConstAST 0 (UtilData {position = (1,58,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,58,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,57,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (VarExprAST (VarId {varName = "x"}) (UtilData {position = (1,60,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,57,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,29,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,18,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) EpsVarDclAST (UtilData {position = (1,4,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})) (UtilData {position = (1,4,4), sourceLine = " main = sys => {      let x = [1,2,3,4,5]       in ((0:x))}"})